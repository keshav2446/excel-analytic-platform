{
  "info": {
    "_postman_id": "a7e9c3b1-5f8d-4a5c-9e9a-8f6d8e7c6b5a",
    "name": "Excel Analytics Platform",
    "description": "API endpoints for the Excel Analytics Platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "Root Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                ""
              ]
            },
            "description": "Check if the backend is running"
          },
          "response": []
        },
        {
          "name": "API Ping",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/ping",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "ping"
              ]
            },
            "description": "Check if the API is responding"
          },
          "response": []
        },
        {
          "name": "API Test (No Auth)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "test"
              ]
            },
            "description": "Test endpoint that doesn't require authentication"
          },
          "response": []
        }
      ],
      "description": "Endpoints to check the health of the API"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "if (response.email) {",
                  "    pm.environment.set('testUserEmail', response.email);",
                  "}",
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.expect(response.message).to.include('verification');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"organization\": \"Test Org\",\n    \"username\": \"testuser{{$randomInt}}\",\n    \"email\": \"test{{$randomInt}}@example.com\",\n    \"password\": \"Password123!\",\n    \"role\": \"analyst\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            },
            "description": "Register a new user. Now sends verification email via Resend API. Valid roles include: student, analyst, cxo, data engineer, data scientist, devops, engineer, fullstack developer, director, product manager, system architect, others"
          },
          "response": []
        },
        {
          "name": "Login User (Verified)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const response = pm.response.json();",
                  "if (response.token) {",
                  "    pm.environment.set('authToken', response.token);",
                  "    pm.test('Login successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(response.token).to.be.a('string');",
                  "    });",
                  "} else if (response.needsVerification) {",
                  "    pm.test('Email verification required', function () {",
                  "        pm.response.to.have.status(401);",
                  "        pm.expect(response.message).to.include('verify');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testUserEmail}}\",\n    \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "login"
              ]
            },
            "description": "Login a user and get JWT token. Now checks for email verification status."
          },
          "response": []
        },
        {
          "name": "Verify Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email verification successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('verification successful');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify?token={{verificationToken}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "verify"
              ],
              "query": [
                {
                  "key": "token",
                  "value": "{{verificationToken}}",
                  "description": "Verification token from email"
                }
              ]
            },
            "description": "Verify user email with token. Now sends welcome email after successful verification."
          },
          "response": []
        },
        {
          "name": "Resend Verification Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Resend verification email successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Verification email sent');",
                  "    pm.expect(response.email).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testUserEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/resend-verification",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "resend-verification"
              ]
            },
            "description": "Resend verification email for unverified users. Uses Resend API to send new verification email."
          },
          "response": []
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User deletion successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('deleted successfully');",
                  "    pm.expect(response.deletedUser).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/user/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "user",
                "{{userId}}"
              ]
            },
            "description": "Delete a user account. Users can only delete their own account for security reasons. Requires authentication."
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Forgot password request successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('password reset link');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testUserEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/forgot-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "forgot-password"
              ]
            },
            "description": "Request password reset. Sends password reset email via Resend API if user exists."
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Password reset successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Password reset successful');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"token\": \"{{resetToken}}\",\n    \"password\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/reset-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "auth",
                "reset-password"
              ]
            },
            "description": "Reset password with token from email. Token expires in 1 hour for security."
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints"
    },
    {
      "name": "Excel Files",
      "item": [
        {
          "name": "Upload Excel File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Excel file upload successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.excelId).to.be.a('string');",
                  "    pm.environment.set('excelFileId', response.excelId);",
                  "    pm.expect(response.columns).to.be.an('array');",
                  "    pm.expect(response.rowCount).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "excelFile",
                  "type": "file",
                  "src": "../sample_files/sample_data.xlsx"
                },
                {
                  "key": "name",
                  "value": "Sample Excel File",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "This is a sample Excel file for testing",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/excel/upload",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "excel",
                "upload"
              ]
            },
            "description": "Upload an Excel file"
          },
          "response": []
        },
        {
          "name": "Get All Excel Files",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/excel",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "excel"
              ]
            },
            "description": "Get all Excel files for the current user"
          },
          "response": []
        },
        {
          "name": "Get Excel File by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/excel/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "excel",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "excel-file-id-here"
                }
              ]
            },
            "description": "Get a specific Excel file by ID"
          },
          "response": []
        },
        {
          "name": "Delete Excel File",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/excel/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "excel",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "excel-file-id-here"
                }
              ]
            },
            "description": "Delete an Excel file"
          },
          "response": []
        }
      ],
      "description": "Excel file management endpoints"
    },
    {
      "name": "Analysis",
      "item": [
        {
          "name": "Create Analysis",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Analysis creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.analysisId).to.be.a('string');",
                  "    pm.environment.set('analysisId', response.analysisId);",
                  "    pm.expect(response.message).to.include('created successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Sample Analysis\",\n    \"description\": \"This is a sample analysis\",\n    \"excelId\": \"{{excelFileId}}\",\n    \"chartType\": \"bar\",\n    \"xAxis\": \"Column A\",\n    \"yAxis\": \"Column B\",\n    \"zAxis\": \"Column C\",\n    \"chartConfig\": {\n        \"title\": \"Sample Chart\",\n        \"darkMode\": true,\n        \"colors\": [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"]\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/analysis",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "analysis"
              ]
            },
            "description": "Create a new analysis"
          },
          "response": []
        },
        {
          "name": "Get All Analyses",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/analysis",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "analysis"
              ]
            },
            "description": "Get all analyses for the current user"
          },
          "response": []
        },
        {
          "name": "Get Analysis by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/analysis/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "analysis",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "analysis-id-here"
                }
              ]
            },
            "description": "Get a specific analysis by ID"
          },
          "response": []
        },
        {
          "name": "Update Analysis",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Updated Analysis\",\n    \"description\": \"This is an updated analysis\",\n    \"chartType\": \"2d-line\",\n    \"chartConfig\": {\n        \"title\": \"Updated Chart\",\n        \"darkMode\": false,\n        \"colors\": [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"]\n    },\n    \"dataMappings\": {\n        \"x\": \"Column A\",\n        \"y\": [\"Column B\", \"Column C\"],\n        \"color\": \"Column D\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/analysis/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "analysis",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "analysis-id-here"
                }
              ]
            },
            "description": "Update an existing analysis"
          },
          "response": []
        },
        {
          "name": "Delete Analysis",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/analysis/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "analysis",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "analysis-id-here"
                }
              ]
            },
            "description": "Delete an analysis"
          },
          "response": []
        }
      ],
      "description": "Analysis management endpoints"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5001",
      "type": "string"
    }
  ]
}
